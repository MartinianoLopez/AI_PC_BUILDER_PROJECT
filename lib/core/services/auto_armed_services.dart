import 'package:ai_pc_builder_project/core/classes/component.dart';
import 'package:ai_pc_builder_project/core/services/openai_service.dart';

String normalizar(String texto) {
  return texto
      .toLowerCase()
      .replaceAll(
        RegExp(r'[^a-z0-9]+'),
        ' ',
      ) // Reemplaza s√≠mbolos no alfanum√©ricos
      .replaceAll(RegExp(r'\s+'), ' ') // Colapsa m√∫ltiples espacios
      .trim();
}

bool coincide(String a, String b) {
  a = normalizar(a);
  b = normalizar(b);

  if (a == b) return true;
  if (a.contains(b) || b.contains(a)) return true;

  // Comparaci√≥n por tokens (palabras)
  final tokensA = a.split(' ').toSet();
  final tokensB = b.split(' ').toSet();
  final interseccion = tokensA.intersection(tokensB);

  return interseccion.length >= (tokensB.length * 0.6); // 60% m√≠nimo
}

Future<List<Component?>> autoArmadoSugerido({
  required List<List<Component>> armado,
  required bool usarIntel,
  required int budget,
}) async {
  // Paso 1: Filtrar categor√≠as relevantes
  List<List<Component>> filteredArmado = [];
  List<int> mapeoIndicesOriginales = [];

  for (int i = 0; i < armado.length; i++) {
    bool incluir = true;
    if ((i == 0 || i == 2) && usarIntel) incluir = false;
    if ((i == 1 || i == 3) && !usarIntel) incluir = false;

    if (incluir) {
      filteredArmado.add(armado[i]);
      mapeoIndicesOriginales.add(i);
    }
  }

  // Paso 2: Construir prompt
  const limiteMaxTokens = 12000;
  const largoEstimado = 25;

  int limite = (limiteMaxTokens / (filteredArmado.length * largoEstimado))
      .floor()
      .clamp(5, 30);

  final componentesDescription = filteredArmado
      .asMap()
      .entries
      .map((entry) {
        final componentes = entry.value;
        if (componentes.length <= 1) {
          return "- Sin opciones para la categor√≠a ${entry.key}";
        }
        return componentes
            .sublist(1)
            .take(limite)
            .map((c) => "- ${c.name} (\$${c.price})")
            .join("\n");
      })
      .join("\n\n");

  final systemPrompt = """
Sos un experto en armado de computadoras. Tu objetivo es armar la mejor PC posible con el presupuesto indicado por el usuario.

Siempre que sea posible, us√° el presupuesto completo. No intentes ahorrar. No elijas componentes m√°s baratos solo por ser econ√≥micos. Cuanto m√°s rendimiento y calidad se logre, mejor.

Seleccion√° UNO SOLO por categor√≠a, asegur√°ndote de que sean compatibles entre s√≠.

Si no hay opciones compatibles en una categor√≠a, dejala sin seleccionar.

Respond√© √∫nicamente con los nombres exactos de los componentes elegidos, uno por l√≠nea. Pod√©s incluir el precio entre par√©ntesis si quer√©s.
""";

  final userPrompt = """
Presupuesto total: \$${budget.toString()}

Estos son los componentes disponibles por categor√≠a:

$componentesDescription

Eleg√≠ uno por categor√≠a.
""";

  final openAI = OpenAIService();
  final respuesta = await openAI.sendPrompt([
    {"role": "system", "content": systemPrompt},
    {"role": "user", "content": userPrompt},
  ]);

  print("üì® Respuesta OpenAI:\n$respuesta");

  // Paso 3: Limpiar respuesta y extraer nombres
  final nombresIA =
      respuesta
          .split('\n')
          .map((line) {
            final idx = line.indexOf(':');
            if (idx != -1) {
              line = line.substring(idx + 1);
            }
            return line.trim().split('(').first.trim();
          })
          .where((line) => line.isNotEmpty)
          .toList();

  // Paso 4: Mapear a los componentes
  List<Component?> seleccionados = List.filled(armado.length, null);

  for (int i = 0; i < filteredArmado.length; i++) {
    final categoria = filteredArmado[i];
    final indexOriginal = mapeoIndicesOriginales[i];

    print("üîç Buscando coincidencia para categor√≠a original $indexOriginal...");
    for (final c in categoria) {
      print(" - ${c.name}");
    }

    final match = categoria.firstWhere(
      (c) => nombresIA.any((nombreIA) => coincide(nombreIA, c.name)),
      orElse: () => categoria[0],
    );

    if (match.id == 'none' || !nombresIA.any((n) => coincide(n, match.name))) {
      print("‚ö†Ô∏è Nada seleccionado para categor√≠a original $indexOriginal");
      continue;
    }

    seleccionados[indexOriginal] = match;
    print("‚úÖ Seleccionado: ${match.name} ‚Üí categor√≠a original $indexOriginal");
  }

  print("üéØ Largo de armado original: ${armado.length}");
  print("üéØ Largo de seleccionados: ${seleccionados.length}");

  return seleccionados;
}
