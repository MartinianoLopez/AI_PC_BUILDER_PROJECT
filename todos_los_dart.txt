----- ./.dart_tool/dartpad/web_plugin_registrant.dart -----
// Flutter web plugin registrant file.
//
// Generated file. Do not edit.
//

// @dart = 2.13
// ignore_for_file: type=lint

import 'package:cloud_firestore_web/cloud_firestore_web.dart';
import 'package:firebase_auth_web/firebase_auth_web.dart';
import 'package:firebase_core_web/firebase_core_web.dart';
import 'package:google_sign_in_web/google_sign_in_web.dart';
import 'package:url_launcher_web/url_launcher_web.dart';
import 'package:flutter_web_plugins/flutter_web_plugins.dart';

void registerPlugins([final Registrar? pluginRegistrar]) {
  final Registrar registrar = pluginRegistrar ?? webPluginRegistrar;
  FirebaseFirestoreWeb.registerWith(registrar);
  FirebaseAuthWeb.registerWith(registrar);
  FirebaseCoreWeb.registerWith(registrar);
  GoogleSignInPlugin.registerWith(registrar);
  UrlLauncherPlugin.registerWith(registrar);
  registrar.registerMessageHandler();
}
----- ./lib/core/classes/component.dart -----
class Component {
  final String id;
  final String name;
  final String link;
  final double price;
  final String image;

  Component({
    required this.id,
    required this.name,
    required this.link,
    required this.price,
    required this.image,
  });
}
----- ./lib/core/providers/components_provider.dart -----
import 'package:flutter/material.dart';
import 'package:ai_pc_builder_project/core/classes/component.dart';
import 'package:ai_pc_builder_project/core/services/firebase_components_service.dart';

class ComponentsProvider with ChangeNotifier {
  List<List<Component>> components = [];
  List<String> titulos = [];
  List<Component?> seleccionados = [];
  bool esAmd = true;
  bool _cargado = false;
  bool isLoading = false;
  bool get estaCargado => _cargado;
  final orden = [
    "procesador_amd",
    "procesador_intel",
    "motherboard_amd",
    "motherboard_intel",
    "memoria_ram",
    "ssd",
    "placa_video",
    "gabinete",
    "fuente",
  ];

  final titulosOrdenados = [
    "Procesador AMD",
    "Procesador Intel",
    "Motherboard AMD",
    "Motherboard Intel",
    "Memoria RAM",
    "Disco (SSD/HDD)",
    "Placa de Video",
    "Gabinete",
    "Fuente de Poder",
  ];

  List<String> get categoriasOrdenado => orden;
  List<String> get categoriasPorMarca =>
      esAmd
          ? [
            "procesador_amd",
            "motherboard_amd",
            "memoria_ram",
            "ssd",
            "placa_video",
            "gabinete",
            "fuente",
          ]
          : [
            "procesador_intel",
            "motherboard_intel",
            "memoria_ram",
            "ssd",
            "placa_video",
            "gabinete",
            "fuente",
          ];

  double get total =>
      seleccionados.fold(0.0, (sum, comp) => sum + (comp?.price ?? 0));

  Future<void> importarComponentes() async {
    if (_cargado) return;
    isLoading = true;
    notifyListeners();
    try {
      final data = await fetchComponentsFromFirestore();
      final List<List<Component>> ordenado = [];
      final List<String> titulosFinal = [];

      for (int i = 0; i < orden.length; i++) {
        final key = orden[i];
        final list = data[key];
        if (list != null) {
          final conPlaceholder = [
            Component(
              id: 'none',
              name: '${titulosOrdenados[i]} - Sin seleccionar',
              link: '',
              price: 0,
              image: 'none',
            ),
            ...list,
          ];

          ordenado.add(conPlaceholder);
          titulosFinal.add(titulosOrdenados[i]);
        }
      }

      components = ordenado;
      titulos = titulosFinal;
      seleccionados = List.filled(components.length, null);
      _cargado = true;

      print("‚úÖ Componentes cargados: ${titulos.length} categor√≠as");
    } catch (e) {
      print("‚ùå Error al crear armado: $e");
    }
    isLoading = false;
    notifyListeners();
    print("üß† Importaci√≥n de componentes llamada desde Home.");
  }

  void setSelected(int index, Component component) {
    print("indice modificado: $index");
    seleccionados[index] = component.id == 'none' ? null : component;
    notifyListeners();
  }

  int getSelected(int posicion) {
    final selected = seleccionados[posicion];
    if (selected == null) return 0;

    final componentesFiltrados = getComponents();

    // Protegemos si hay un desajuste de √≠ndices
    if (posicion >= componentesFiltrados.length) return 0;

    final index = componentesFiltrados[posicion].indexWhere(
      (c) => c.id == selected.id,
    );
    return index >= 0 ? index : 0; // evitar -1 porque genera un range error
  }

  void setAllSelected(
    List<Component?> newSeleccionados, {
    BuildContext? context,
  }) {
    print("üì¶ Largo nuevo: ${newSeleccionados.length}");
    print("üì¶ Largo actual: ${seleccionados.length}");

    if (newSeleccionados.length != seleccionados.length) {
      print("‚ö†Ô∏è Tama√±os desalineados: adaptando lista...");
      seleccionados = List.generate(
        seleccionados.length,
        (i) => i < newSeleccionados.length ? newSeleccionados[i] : null,
      );

      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text(
              "‚ö†Ô∏è Algunos componentes no fueron cargados correctamente.",
            ),
            backgroundColor: Colors.orange,
          ),
        );
      }
    } else {
      seleccionados = newSeleccionados;
    }

    notifyListeners();
  }

  void cambiarAmdOIntel() {
    esAmd = !esAmd;
    notifyListeners();
  }

  int getSelectedIndexParaVista(int vistaIndex) {
    final seleccion = seleccionados.firstWhere(
      (s) => getComponents()[vistaIndex].any((c) => c.id == s?.id),
      orElse: () => null,
    );

    if (seleccion == null) return 0;

    return getComponents()[vistaIndex].indexWhere((c) => c.id == seleccion.id);
  }

  // sirve para obtener los componentes sin los que no son del amd o intel seleccionado
  List<List<Component>> getComponents() {
    List<List<Component>> result = [];
    if (esAmd) {
      result.add(components[0]);
      result.add(components[2]);
    } else {
      result.add(components[1]);
      result.add(components[3]);
    }
    result.addAll(components.sublist(4));
    return result;
  }
}
----- ./lib/core/providers/theme_provider.dart -----
import 'package:flutter/material.dart';

class ThemeProvider with ChangeNotifier {
  bool isDarkMode = true;

  ThemeMode get currentTheme => isDarkMode ? ThemeMode.dark : ThemeMode.light;

  void toggleTheme() {
    isDarkMode = !isDarkMode;
    notifyListeners();
  }
}
----- ./lib/core/providers/user_configuration_storage.dart -----
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:ai_pc_builder_project/core/classes/component.dart';

class UserConfigurationStorage {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<void> saveConfiguration({
    required String uid,
    required String configName,
    required double total,
    required List<Component?> seleccionados,
    required bool esAmd,
  }) async {
    final armadosRef = _firestore
        .collection('users')
        .doc(uid)
        .collection('armados');

    // Validar l√≠mite de 10 armados
    final snapshot = await armadosRef.get();
    if (snapshot.docs.length >= 10) {
      throw Exception('Ya tienes 10 PCs guardadas.');
    }

    // Convertir componentes a JSON completo (preservando campos de Firebase)
    final componentes =
        seleccionados
            .where((c) => c != null)
            .map(
              (c) => {
                'id': c!.id,
                'titulo': c.name,
                'precio': c.price,
                'imagen': c.image,
                'enlace': c.link,
                // Extras si ten√©s: categor√≠a, tienda, etc.
              },
            )
            .toList();

    // Crear documento
    final data = {
      'name': configName,
      'total': total,
      'date': DateTime.now().toIso8601String(),
      'componentes': componentes,
      'esAmd': esAmd,
    };

    await armadosRef.add(data);
  }

  Future<void> deleteConfiguration({
    required String uid,
    required String docId,
  }) async {
    await _firestore
        .collection('users')
        .doc(uid)
        .collection('armados')
        .doc(docId)
        .delete();
  }

  Future<void> updateConfiguration({
    required String uid,
    required String docId,
    required String configName,
    required double total,
    required List<Component?> seleccionados,
    required bool esAmd,
  }) async {
    final componentes =
        seleccionados
            .where((c) => c != null)
            .map(
              (c) => {
                'id': c!.id,
                'titulo': c.name,
                'precio': c.price,
                'imagen': c.image,
                'enlace': c.link,
              },
            )
            .toList();

    final data = {
      'name': configName,
      'total': total,
      'date': DateTime.now().toIso8601String(),
      'componentes': componentes,
      'esAmd': esAmd,
    };

    await FirebaseFirestore.instance
        .collection('users')
        .doc(uid)
        .collection('armados')
        .doc(docId)
        .set(data);
  }

  Future<List<Map<String, dynamic>>> getUserConfigurations(String uid) async {
    final snapshot =
        await _firestore
            .collection('users')
            .doc(uid)
            .collection('armados')
            .orderBy('date', descending: true)
            .get();

    return snapshot.docs.map((doc) {
      final data = doc.data();
      return {
        'id': doc.id,
        'name': data['name'],
        'total': data['total'],
        'componentes': data['componentes'] ?? [],
        'esAmd': data['esAmd'] ?? true,
      };
    }).toList();
  }
}

Future<List<Component?>> mapGuardadoASeleccion(
  List componentesGuardados,
  List<List<Component>> armadoActual,
) async {
  return List.generate(armadoActual.length, (index) {
    if (index >= componentesGuardados.length) return null;

    final guardado = componentesGuardados[index];
    if (guardado == null || guardado['id'] == null) return null;

    final componente = armadoActual[index].firstWhere(
      (c) => c.id == guardado['id'],
      orElse: () => Component(id: '', name: '', price: 0, image: '', link: ''),
    );

    return componente.id.isEmpty ? null : componente;
  });
}
----- ./lib/core/router/app_router.dart -----
import 'package:ai_pc_builder_project/presentation/screens/search_component/search_component.dart';
import 'package:ai_pc_builder_project/presentation/screens/testing/ai_test.dart';
import 'package:go_router/go_router.dart';
import 'package:ai_pc_builder_project/presentation/screens/start/start.dart';
import 'package:ai_pc_builder_project/presentation/screens/registration/registration.dart';
import 'package:ai_pc_builder_project/presentation/screens/login/login.dart';
import 'package:ai_pc_builder_project/presentation/screens/home/home_screen.dart';
import 'package:ai_pc_builder_project/presentation/screens/links/components_links_view.dart';
import 'package:ai_pc_builder_project/presentation/screens/builder/builder_view.dart';

final GoRouter appRouter = GoRouter(
  routes: [
    GoRoute(path: '/', builder: (context, state) => const StartScreen()),

    GoRoute(
      path: '/registration',
      builder: (context, state) => const RegistrationScreen(),
    ),

    GoRoute(path: '/login', builder: (context, state) => const LoginScreen()),

    GoRoute(path: '/home', builder: (context, state) => const HomeScreen()),

    GoRoute(
      path: '/links',
      builder: (context, state) => const ComponentsLinks(),
    ),

    GoRoute(
      path: '/components',
      builder: (context, state) {
        final args = state.extra as Map<String, dynamic>?;

        return ComponenetsView(
          initialBudget: args?['budget'] ?? 0,
          selectedOption: args?['selectedOption'],
          idArmado: args?['editId'],
          nombreArmado: args?['name'],
          seleccionados: args?['seleccionados'],
          esAmd: args?['esAmd'] ?? true,
        );
      },
    ),
    GoRoute(
      path: '/search-component/:category',
      name: 'search-component',
      builder: (context, state) {
        final categoryStr = state.pathParameters['category'];
        final category = categoryStr ?? 'null';
        return SearchComponentScreen(category: category);
      },
    ),

    GoRoute(
      path: '/testing',
      builder: (context, state) => const TestingSCreen(),
    ),
  ],
);
----- ./lib/core/services/auto_armed_services.dart -----
import 'package:ai_pc_builder_project/core/classes/component.dart';
import 'package:ai_pc_builder_project/core/services/openai_service.dart';

String normalizar(String texto) {
  return texto
      .toLowerCase()
      .replaceAll(
        RegExp(r'[^a-z0-9]+'),
        ' ',
      ) // Reemplaza s√≠mbolos no alfanum√©ricos
      .replaceAll(RegExp(r'\s+'), ' ') // Colapsa m√∫ltiples espacios
      .trim();
}

bool coincide(String a, String b) {
  a = normalizar(a);
  b = normalizar(b);

  if (a == b) return true;
  if (a.contains(b) || b.contains(a)) return true;

  // Comparaci√≥n por tokens (palabras)
  final tokensA = a.split(' ').toSet();
  final tokensB = b.split(' ').toSet();
  final interseccion = tokensA.intersection(tokensB);

  return interseccion.length >= (tokensB.length * 0.6); // 60% m√≠nimo
}

Future<List<Component?>> autoArmadoSugerido({
  required List<List<Component>> armado,
  required bool usarIntel,
  required int budget, 
  String? selectedOption,
}) async {
  // Paso 1: Filtrar categor√≠as relevantes
  List<List<Component>> filteredArmado = [];
  List<int> mapeoIndicesOriginales = [];

  for (int i = 0; i < armado.length; i++) {
    bool incluir = true;
    if ((i == 0 || i == 2) && usarIntel) incluir = false;
    if ((i == 1 || i == 3) && !usarIntel) incluir = false;

    if (incluir) {
      filteredArmado.add(armado[i]);
      mapeoIndicesOriginales.add(i);
    }
  }

  // Paso 2: Construir prompt
  const limiteMaxTokens = 12000;
  const largoEstimado = 25;

  int limite = (limiteMaxTokens / (filteredArmado.length * largoEstimado))
      .floor()
      .clamp(5, 30);

  final componentesDescription = filteredArmado
      .asMap()
      .entries
      .map((entry) {
        final componentes = entry.value;
        if (componentes.length <= 1) {
          return "- Sin opciones para la categor√≠a ${entry.key}";
        }
        return componentes
            .sublist(1)
            .take(limite)
            .map((c) => "- ${c.name} (\$${c.price})")
            .join("\n");
      })
      .join("\n\n");

    selectedOption ??= "Uso general";
    print("tipo:$selectedOption __________________________________");

  final systemPrompt = """
Sos un experto en armado de computadoras. Tu objetivo es armar la mejor PC posible con el presupuesto indicado por el usuario.

Siempre que sea posible, us√° el presupuesto completo. No intentes ahorrar. No elijas componentes m√°s baratos solo por ser econ√≥micos. Cuanto m√°s rendimiento y calidad se logre, mejor.

Seleccion√° UNO SOLO por categor√≠a, asegur√°ndote de que sean compatibles entre s√≠.

Si no hay opciones compatibles en una categor√≠a, dejala sin seleccionar.

Respond√© √∫nicamente con los nombres exactos de los componentes elegidos, uno por l√≠nea. Pod√©s incluir el precio entre par√©ntesis si quer√©s.
""";

  final userPrompt = """
Presupuesto total: \$${budget.toString()} la voy a usar con la finalidad de: \$${selectedOption.toString()}

Estos son los componentes disponibles por categor√≠a:

$componentesDescription

Eleg√≠ uno por categor√≠a.
""";

  final openAI = OpenAIService();
  final respuesta = await openAI.sendPrompt([
    {"role": "system", "content": systemPrompt},
    {"role": "user", "content": userPrompt},
  ]);

  print("üì® Respuesta OpenAI:\n$respuesta");

  // Paso 3: Limpiar respuesta y extraer nombres
  final nombresIA =
      respuesta
          .split('\n')
          .map((line) {
            final idx = line.indexOf(':');
            if (idx != -1) {
              line = line.substring(idx + 1);
            }
            return line.trim().split('(').first.trim();
          })
          .where((line) => line.isNotEmpty)
          .toList();

  // Paso 4: Mapear a los componentes
  List<Component?> seleccionados = List.filled(armado.length, null);

  for (int i = 0; i < filteredArmado.length; i++) {
    final categoria = filteredArmado[i];
    final indexOriginal = mapeoIndicesOriginales[i];

    print("üîç Buscando coincidencia para categor√≠a original $indexOriginal...");
    for (final c in categoria) {
      print(" - ${c.name}");
    }

    final match = categoria.firstWhere(
      (c) => nombresIA.any((nombreIA) => coincide(nombreIA, c.name)),
      orElse: () => categoria[0],
    );

    if (match.id == 'none' || !nombresIA.any((n) => coincide(n, match.name))) {
      print("‚ö†Ô∏è Nada seleccionado para categor√≠a original $indexOriginal");
      continue;
    }

    seleccionados[indexOriginal] = match;
    print("‚úÖ Seleccionado: ${match.name} ‚Üí categor√≠a original $indexOriginal");
  }

  print("üéØ Largo de armado original: ${armado.length}");
  print("üéØ Largo de seleccionados: ${seleccionados.length}");

  return seleccionados;
}
----- ./lib/core/services/check_compatibility_with_ai.dart -----
import 'package:ai_pc_builder_project/core/classes/component.dart';
import 'package:ai_pc_builder_project/core/services/openai_service.dart';

Future<Map<String, dynamic>> checkCompatibilityWithAI(
  List<Component> components,
  List<String> categorias,
) async {
  final componentsDescription = components
      .map((c) => "- ${c.name} (\$${c.price.toStringAsFixed(2)} ARS)")
      .join("\n");

  final messages = [
    {
      "role": "system",
      "content": '''
Sos un experto en hardware de PC. Vas a recibir una lista de componentes.

Divid√≠ la respuesta en dos partes:
1. Analiz√° CADA COMPONENTE por separado. Indic√° si es compatible y posibles mejoras. Us√° el nombre o categor√≠a para identificarlo.
2. Al final, hac√© un an√°lisis general del armado completo.

El formato debe ser este:

[AN√ÅLISIS INDIVIDUAL]
Procesador: Compatible con la motherboard.
RAM: Podr√≠a aumentarse a 16GB para mejor rendimiento.
...

[AN√ÅLISIS GENERAL]
El armado est√° bien balanceado. Considerar fuente de mejor calidad.
''',
    },
    {
      "role": "user",
      "content": '''
Estos son los componentes:
$componentsDescription

¬øPod√©s verificar compatibilidad individual y general seg√∫n el formato anterior?
''',
    },
  ];

  final openAI = OpenAIService();
  final respuesta = await openAI.sendPrompt(messages);

  String individualRaw = '';
  String general = '';
  final individualParsed = <String, String>{};

  if (respuesta.trim().isEmpty) {
    individualRaw = 'Todos los componentes parecen correctos.';
    general = '‚úÖ No se detectaron problemas en el armado.';
  } else {
    final bloques = respuesta.split(RegExp(r'\[.*\]'));
    final etiquetas = RegExp(r'\[.*\]').allMatches(respuesta).toList();

    for (var i = 0; i < etiquetas.length; i++) {
      final titulo = etiquetas[i].group(0) ?? '';
      final contenido = bloques[i + 1].trim();

      if (titulo.toLowerCase().contains('individual')) {
        individualRaw = contenido;
      } else if (titulo.toLowerCase().contains('general')) {
        general = contenido;
      }
    }

    final lineas = individualRaw.split('\n');
    for (final linea in lineas) {
      final partes = linea.split(':');
      if (partes.length >= 2) {
        final clave = partes[0].trim().toLowerCase();
        final contenido = partes.sublist(1).join(':').trim();

        for (final categoria in categorias) {
          final catNormalizada = categoria.toLowerCase();
          if ((clave.contains('cpu') && catNormalizada.contains('procesador')) ||
              (clave.contains('procesador') && catNormalizada.contains('procesador')) ||
              (clave.contains('ram') && catNormalizada.contains('memoria')) ||
              (clave.contains('mother') && catNormalizada.contains('mother')) ||
              (clave.contains('ssd') && catNormalizada.contains('ssd')) ||
              (clave.contains('gabinete') && catNormalizada.contains('gabinete')) ||
              (clave.contains('fuente') && catNormalizada.contains('fuente')) ||
              ((clave.contains('placa') || clave.contains('gpu')) && catNormalizada.contains('video'))) {
            individualParsed[categoria] = contenido;
            break;
          }
        }
      }
    }
  }

  return {
    'general': general,
    'individual': individualParsed,
  };
}
----- ./lib/core/services/firebase_components_service.dart -----
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:ai_pc_builder_project/core/classes/component.dart';

final firestore = FirebaseFirestore.instance;
final categorias = [
  'procesador_amd',
  'procesador_intel',
  'motherboard_amd',
  'motherboard_intel',
  'memoria_ram',
  'ssd',
  'placa_video',
  'gabinete',
  'fuente',
];

/// üîÑ Descarga componentes desde Firebase y los organiza por categor√≠a
Future<Map<String, List<Component>>> fetchComponentsFromFirestore() async {
  final Map<String, List<Component>> resultado = {};

  for (final categiria in categorias) {
    final querySnapshot =
        await firestore
            .collection('productos_try')
            .doc(categiria)
            .collection('items')
            .orderBy('precio')
            .get();

    final List<Component> componentes = [];

    for (final doc in querySnapshot.docs) {
      final data = doc.data();

      componentes.add(
        Component(
          id: doc.id,
          name: data['titulo'] ?? '',
          price: (data['precio'] as num).toDouble(),
          link: data['enlace'] ?? '',
          image: data['imagen'] ?? '',
        ),
      );
    }

    resultado[categiria] = componentes;
  }
  print('‚úÖ Componentes descargados y filtrados por precio');
  return resultado;
}

Future<List<Component>> fetchComponentsByCategory({
  required String category,
}) async {
  final querySnapshot =
      await firestore
          .collection('productos_try')
          .doc(category)
          .collection('items')
          .orderBy('precio')
          .get();

  final List<Component> componentes = [];

  for (final doc in querySnapshot.docs) {
    final data = doc.data();

    componentes.add(
      Component(
        id: doc.id,
        name: data['titulo'] ?? '',
        price: (data['precio'] as num).toDouble(),
        link: data['enlace'] ?? '',
        image: data['imagen'] ?? '',
      ),
    );
  }
  return componentes;
}
----- ./lib/core/services/generador_de_rangos.dart -----
Map<String, Map<String, double>> generarRangos(double presupuesto) {
  const variacion = 0.20;
  const distribucion = {
    'procesador_amd': 0.24,
    'procesador_intel': 0.24,
    'motherboard_amd': 0.20,
    'motherboard_intel': 0.20,
    'memoria_ram': 0.15,
    'ssd': 0.10,
    'placa_video': 0.20,
    'gabinete': 0.06,
    'fuente': 0.05,
  };

  final rangos = <String, Map<String, double>>{};

  distribucion.forEach((categoria, porcentaje) {
    final base = presupuesto * porcentaje;
    rangos[categoria] = {'min': 0, 'max': base * (1 + variacion)};
  });

  return rangos;
}
----- ./lib/core/services/openai_service.dart -----
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter_dotenv/flutter_dotenv.dart';

class OpenAIService {
  Future<String> sendPrompt(List<Map<String, String>> messages) async {
    await dotenv.load();
    var apiKey = dotenv.env['OPENAI_API_KEY'];
    if (apiKey == null) {
      print("Error: No se encontr√≥ la clave de API.");
      return "Error: No se encontr√≥ la clave de API.";
    }

    final url = Uri.parse('https://api.openai.com/v1/chat/completions');
    final response = await http.post(
      url,
      headers: {
        'Authorization': 'Bearer $apiKey',
        'Content-Type': 'application/json',
      },
      body: jsonEncode({
        "model": "gpt-3.5-turbo",
        "messages": messages,
        "max_tokens": 500,
      }),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      return data['choices'][0]['message']['content'];
    } else {
      throw Exception('Error al consultar ChatGPT: ${response.body}');
    }
  }
}
----- ./lib/firebase_options.dart -----
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.env['FIREBASE_API_KEY_FOR_ANDROID']!,
    appId: '1:879798327262:android:70194218716ef94bcaaf4f',
    messagingSenderId: '879798327262',
    projectId: 'iapcbuilder',
    storageBucket: 'iapcbuilder.firebasestorage.app',
  );

  static FirebaseOptions web = FirebaseOptions(
    apiKey: dotenv.env['FIREBASE_API_KEY_FOR_WEB']!,
    appId: '1:879798327262:web:21ce1ffdab7af879caaf4f',
    messagingSenderId: '879798327262',
    projectId: 'iapcbuilder',
    authDomain: 'iapcbuilder.firebaseapp.com',
    storageBucket: 'iapcbuilder.firebasestorage.app',
  );
}
----- ./lib/main.dart -----
import 'package:ai_pc_builder_project/core/providers/components_provider.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'firebase_options.dart';
import 'package:provider/provider.dart';
import 'core/providers/theme_provider.dart';
import 'core/router/app_router.dart';

void main() async {
  await dotenv.load();
  WidgetsFlutterBinding.ensureInitialized();
  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    // ignore: avoid_print
    print('‚úÖ Firebase se conect√≥ correctamente');
  } catch (e) {
    // ignore: avoid_print
    print('‚ùå Error al conectar Firebase: $e');
  }

  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(create: (_) => ComponentsProvider()),
      ],
      child: const MainApp(),
    ),
  );
}

class MainApp extends StatelessWidget {
  const MainApp({super.key});

  @override
  Widget build(BuildContext context) {
    final themeProvider = Provider.of<ThemeProvider>(context);

    return MaterialApp.router(
      debugShowCheckedModeBanner: false,
      theme: ThemeData.light(),
      darkTheme: ThemeData.dark(),
      themeMode: themeProvider.currentTheme,
      routerConfig: appRouter,
    );
  }
}
----- ./lib/presentation/screens/builder/builder_view.dart -----
import 'package:ai_pc_builder_project/core/classes/component.dart';
import 'package:ai_pc_builder_project/core/providers/components_provider.dart';
import 'package:ai_pc_builder_project/core/services/auto_armed_services.dart';
import 'package:ai_pc_builder_project/core/services/check_compatibility_with_ai.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:ai_pc_builder_project/core/providers/user_configuration_storage.dart';

class ComponenetsView extends StatefulWidget {
  const ComponenetsView({
    super.key,
    required this.initialBudget,
    this.idArmado,
    this.nombreArmado,
    this.seleccionados,
    this.esAmd = true,
    this.selectedOption,
  });

  final int initialBudget;
  final String? idArmado; // ID del Armado abierto
  final String? nombreArmado; // nombre del Armado abierto
  final List<Component?>? seleccionados;
  final bool esAmd;
  final String? selectedOption;

  @override
  State<ComponenetsView> createState() => _ComponentsViewState();
}

class _ComponentsViewState extends State<ComponenetsView> {
  bool loadingSaved = true;
  Map<String, String> analisisIndividual = {};
  String analisisGeneral = '';

  late int budget;

  @override
  void initState() {
    super.initState();
    budget = widget.initialBudget;

    WidgetsBinding.instance.addPostFrameCallback((_) async {
      final provider = Provider.of<ComponentsProvider>(context, listen: false);

      // Restaurar AMD/Intel desde lo guardado
      provider.esAmd = widget.esAmd;

      // Importar componentes solo si a√∫n no est√°n cargados
      await provider.importarComponentes();

      // Restaurar selecci√≥n de sliders si hay valores guardados
      if (widget.seleccionados != null && widget.seleccionados!.isNotEmpty) {
        // ‚úÖ Caso de edici√≥n: cargar armado
        provider.setAllSelected(widget.seleccionados!);
      } else {
        // ‚úÖ Caso de armado nuevo: limpiar selecci√≥n anterior
        provider.setAllSelected(
          List.filled(provider.getComponents().length, null),
        );
      }
      if(widget.selectedOption != null){ // para que no se auto arme cuando se abre un guardado
      final seleccionados = await autoArmadoSugerido(
                          armado: provider.components,
                          usarIntel: !provider.esAmd,
                          budget: widget.initialBudget,
                          selectedOption: widget.selectedOption,
                        );
      provider.setAllSelected(seleccionados);
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final provider = Provider.of<ComponentsProvider>(context, listen: true);
    final total = provider.total;
    final excedido = total > budget;

    return PopScope(
      canPop: true,
      onPopInvokedWithResult: (didPop, result) {
        if (didPop) {
          // Resetear sliders al salir
          provider.setAllSelected(
            List.filled(provider.getComponents().length, null),
          );
        }
      },
      child: Scaffold(
        appBar: AppBar(
          backgroundColor: const Color(0xFF121212),
          elevation: 0,
          title: Row(
            children: [
              // Presupuesto
              const Spacer(),
              Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  const Text(
                    'Presupuesto',
                    style: TextStyle(color: Colors.grey, fontSize: 12),
                  ),
                  Text(
                    '\$${NumberFormat("#,##0", "es_AR").format(budget)}',
                    style: TextStyle(
                      color:
                          excedido
                              ? Colors.redAccent
                              : const Color.fromARGB(255, 232, 230, 230),
                      fontSize: 18,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ],
              ),
              const Spacer(),
              // Separador vertical
              Container(height: 30, width: 1, color: Colors.grey[700]),
              const Spacer(),
              // Total
              Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  const Text(
                    'Total',
                    style: TextStyle(color: Colors.grey, fontSize: 12),
                  ),
                  Row(
                    children: [
                      Text(
                        '\$${NumberFormat("#,##0", "es_AR").format(total)}',
                        style: TextStyle(
                          color:
                              excedido
                                  ? Colors.redAccent
                                  : const Color.fromARGB(255, 232, 230, 230),
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      if (excedido)
                        const Padding(
                          padding: EdgeInsets.only(left: 6.0),
                          child: Icon(
                            Icons.warning_amber_rounded,
                            color: Colors.redAccent,
                            size: 20,
                          ),
                        ),
                    ],
                  ),
                ],
              ),
              const Spacer(),
              const SizedBox(width: 60),
            ],
          ),
        ),
        body:
            provider.isLoading
                ? const Center(child: CircularProgressIndicator())
                : BuilderView(components: provider.getComponents()),
        bottomNavigationBar: const _RouteButtons(),
      ),
    );
  }
}

class BuilderView extends StatelessWidget {
  final List<List<Component>> components;
  const BuilderView({super.key, required this.components});

  @override
  Widget build(BuildContext context) {
    final state = context.findAncestorStateOfType<_ComponentsViewState>();
    final general = state?.analisisGeneral ?? '';

    return ListView(
      padding: const EdgeInsets.only(bottom: 16),
      children: [
        Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 1200),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // Sliders
                for (var i = 0; i < components.length; i++)
                  _ComponentSlider(components: components[i], posicion: i),

                // An√°lisis general de IA
                if (general.isNotEmpty)
                  Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Card(
                      color: Colors.black26,
                      child: Padding(
                        padding: const EdgeInsets.all(12.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'üîç An√°lisis general IA',
                              style: TextStyle(
                                fontSize: 16,
                                color: Colors.amber,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 8),
                            Text(
                              general,
                              style: const TextStyle(
                                fontSize: 14,
                                color: Colors.white70,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
              ],
            ),
          ),
        ),
      ],
    );
  }
}

class _ComponentSlider extends StatefulWidget {
  const _ComponentSlider({required this.components, required this.posicion});

  final List<Component> components;
  final int posicion;

  @override
  State<_ComponentSlider> createState() => _ComponentSliderState();
}

class _ComponentSliderState extends State<_ComponentSlider> {
  @override
  Widget build(BuildContext context) {
    final provider = Provider.of<ComponentsProvider>(context, listen: true);
    final categorias = provider.categoriasPorMarca;

    // Obtenemos el an√°lisis individual seg√∫n la categor√≠a
    final state = context.findAncestorStateOfType<_ComponentsViewState>();
    final nombreCategoria = categorias[widget.posicion];
    final textoAnalisis = state?.analisisIndividual[nombreCategoria] ?? '';

    // üîç Filtro para decidir si el mensaje vale la pena mostrarse
    final textoFiltrado = textoAnalisis.toLowerCase();

    final esMensajeGenerico =
        textoFiltrado.startsWith('compatible con el') ||
        textoFiltrado.startsWith('compatible con la') ||
        textoFiltrado.startsWith('es compatible con') ||
        textoFiltrado.startsWith('compatible con todos') ||
        textoFiltrado.contains('compatible con el sistema') ||
        textoFiltrado.contains('compatibles entre s√≠');

    final esMensajeUtil =
        textoFiltrado.contains('no es compatible con') ||
        textoFiltrado.contains('pero') ||
        textoFiltrado.contains('mejor') ||
        textoFiltrado.contains('podr√≠a') ||
        !esMensajeGenerico;

    return Consumer<ComponentsProvider>(
      builder: (context, provider, _) {
        if (widget.components.isEmpty) return const SizedBox();

        int selectedIndex = provider.getSelectedIndexParaVista(widget.posicion);
        selectedIndex =
            (selectedIndex >= 0 && selectedIndex < widget.components.length)
                ? selectedIndex
                : 0;

        final component = widget.components[selectedIndex];
        final formattedPrice = NumberFormat.currency(
          locale: 'es_AR',
          symbol: '\$',
          decimalDigits: 2,
        ).format(component.price);

        return Card(
          margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
          child: InkWell(
            onTap:
                () => context.pushNamed(
                  'search-component',
                  pathParameters: {'category': categorias[widget.posicion]},
                ),
            child: Padding(
              padding: const EdgeInsets.all(12.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              component.name,
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 8),
                            Slider(
                              value: selectedIndex.toDouble(),
                              min: 0,
                              max: (widget.components.length - 1).toDouble(),
                              divisions:
                                  widget.components.length > 1
                                      ? widget.components.length
                                      : null,
                              onChanged: (value) {
                                provider.setSelected(
                                  widget.posicion,
                                  widget.components[value.toInt()],
                                );
                              },
                            ),
                            if (esMensajeUtil)
                              Padding(
                                padding: const EdgeInsets.only(top: 8.0),
                                child: Text(
                                  textoAnalisis,
                                  style: const TextStyle(
                                    fontSize: 13,
                                    color: Colors.amber,
                                    fontStyle: FontStyle.italic,
                                  ),
                                ),
                              ),
                          ],
                        ),
                      ),
                      const SizedBox(width: 12),
                      GestureDetector(
                        onLongPress: () {
                          showDialog(
                            context: context,
                            builder:
                                (_) => AlertDialog(
                                  title: Text(component.name),
                                  content: Text(
                                    "\$ ${component.price.toStringAsFixed(2)}",
                                    style: const TextStyle(
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                  actions: [
                                    TextButton(
                                      onPressed:
                                          () => Navigator.of(context).pop(),
                                      child: const Text("OK"),
                                    ),
                                  ],
                                ),
                          );
                        },
                        child: Column(
                          children: [
                            if (component.image == 'none')
                              const Icon(Icons.block, size: 70)
                            else if (component.image.trim().isNotEmpty)
                              ClipRRect(
                                borderRadius: BorderRadius.circular(8),
                                child: Image.network(
                                  component.image,
                                  width: 70,
                                  height: 70,
                                  cacheWidth: 140,
                                  cacheHeight: 140,
                                  fit: BoxFit.cover,
                                  filterQuality: FilterQuality.high,
                                  errorBuilder:
                                      (_, __, ___) => const Icon(
                                        Icons.broken_image,
                                        size: 70,
                                      ),
                                  loadingBuilder: (context, child, progress) {
                                    if (progress == null) return child;
                                    return const SizedBox(
                                      width: 70,
                                      height: 70,
                                      child: Center(
                                        child: CircularProgressIndicator(
                                          strokeWidth: 2,
                                        ),
                                      ),
                                    );
                                  },
                                ),
                              )
                            else
                              const Icon(Icons.image_not_supported, size: 70),
                            const SizedBox(height: 4),
                            Text(
                              formattedPrice,
                              style: const TextStyle(
                                color: Colors.white70,
                                fontSize: 12,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }
}

class _RouteButtons extends StatefulWidget {
  const _RouteButtons();

  @override
  State<_RouteButtons> createState() => _RouteButtonsState();
}

class _RouteButtonsState extends State<_RouteButtons> {
  Future<void> _analizarCompatibilidadConIA(BuildContext context) async {     // al presionar el boton analizar se llama este metodo
    final provider = Provider.of<ComponentsProvider>(context, listen: false);   

    showDialog(
      context: context,
      barrierDismissible: false,
      builder:
          (_) => const AlertDialog(
            content: Row(
              children: [
                CircularProgressIndicator(),
                SizedBox(width: 20),
                Expanded(child: Text("Analizando compatibilidad con IA...")),
              ],
            ),
          ),
    );

    final result = await checkCompatibilityWithAI(                             // crea dos analisis mediante el service
      provider.seleccionados.whereType<Component>().toList(),
      provider.categoriasPorMarca
    );

    if (!context.mounted) return;
    Navigator.of(context).pop();

    final state = context.findAncestorStateOfType<_ComponentsViewState>();

    if (state != null) {
      state.setState(() {                                                      // se cambian los analisis actuales por los nuevos en state del _ComponentsView
        state.analisisGeneral = result['general'] ?? '';
        state.analisisIndividual = result['individual'] ?? '';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final screen = context.findAncestorWidgetOfExactType<ComponenetsView>();
    final isEditing = screen?.idArmado != null;
    String? currentName = screen?.nombreArmado;

    return Container(
      padding: const EdgeInsets.all(12),
      child: LayoutBuilder(
        builder: (context, constraints) {
          final isMobile = constraints.maxWidth < 750;
          return Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Flex(
                direction: isMobile ? Axis.vertical : Axis.horizontal,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                crossAxisAlignment:
                    isMobile
                        ? CrossAxisAlignment.stretch
                        : CrossAxisAlignment.center,
                children: [
                  Padding(
                    padding: const EdgeInsets.all(2.0),
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        textStyle: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      child: Text(isEditing ? 'Actualizar' : 'Guardar'),
                      onPressed: () async {
                        final provider = Provider.of<ComponentsProvider>(
                          context,
                          listen: false,
                        );
                        final uid = FirebaseAuth.instance.currentUser?.uid;

                        if (uid == null) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                              content: Text('‚ùå Usuario no logueado'),
                            ),
                          );
                          return;
                        }

                        if (currentName?.trim().isEmpty ?? true) {
                          await showDialog(
                            context: context,
                            builder: (context) {
                              return AlertDialog(
                                title: const Text('Nombre del armado'),
                                content: TextField(
                                  autofocus: true,
                                  onChanged: (value) {
                                    currentName = value;
                                  },
                                  decoration: const InputDecoration(
                                    hintText: "Ej: Mi PC gamer",
                                  ),
                                ),
                                actions: [
                                  TextButton(
                                    onPressed: () => Navigator.pop(context),
                                    child: const Text('Cancelar'),
                                  ),
                                  ElevatedButton(
                                    onPressed: () => Navigator.pop(context),
                                    child: const Text('Guardar'),
                                  ),
                                ],
                              );
                            },
                          );

                          if (currentName!.trim().isEmpty) return;
                        }

                        try {
                          final storage = UserConfigurationStorage();

                          if (isEditing) {
                            await storage.updateConfiguration(
                              uid: uid,
                              docId: screen!.idArmado!,
                              configName: currentName!.trim(),
                              total: provider.total,
                              seleccionados: provider.seleccionados,
                              esAmd: provider.esAmd,
                            );
                          } else {
                            await storage.saveConfiguration(
                              uid: uid,
                              configName: currentName!.trim(),
                              total: provider.total,
                              seleccionados: provider.seleccionados,
                              esAmd: provider.esAmd,
                            );
                          }

                          if (context.mounted) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text(
                                  isEditing
                                      ? '‚úÖ Armado actualizado'
                                      : '‚úÖ Armado guardado',
                                ),
                              ),
                            );
                            Navigator.pop(context, true);
                          }
                        } catch (e) {
                          if (context.mounted) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('‚ùå Error: ${e.toString()}'),
                              ),
                            );
                          }
                        }
                      },
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(2.0),
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        textStyle: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      onPressed: () async {
                        final provider = Provider.of<ComponentsProvider>(
                          context,
                          listen: false,
                        );

                        showDialog(
                          context: context,
                          barrierDismissible: false,
                          builder:
                              (_) => const AlertDialog(
                                content: Row(
                                  children: [
                                    CircularProgressIndicator(),
                                    SizedBox(width: 20),
                                    Expanded(
                                      child: Text(
                                        "La IA est√° armando tu PC...",
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                        );

                        print(
                          "üí∞ Presupuesto pasado a IA: ${screen!.initialBudget}",
                        );

                        final seleccionados = await autoArmadoSugerido(
                          armado: provider.components,
                          usarIntel: !provider.esAmd,
                          budget: screen.initialBudget,
                        );
                        if (!context.mounted) return;
                        Navigator.of(context).pop();

                        provider.setAllSelected(seleccionados);

                        if (!context.mounted) return;
                        await showDialog(
                          context: context,
                          builder:
                              (_) => AlertDialog(
                                title: Text(
                                  provider.esAmd
                                      ? "Armado AMD sugerido"
                                      : "Armado Intel sugerido",
                                ),
                                content: Text(
                                  "La IA ha generado una configuraci√≥n compatible basada en componentes ${provider.esAmd ? 'AMD' : 'Intel'}. Pod√©s revisarla y ajustarla si lo dese√°s.",
                                ),
                                actions: [
                                  ElevatedButton(
                                    onPressed: () => Navigator.pop(context),
                                    child: const Text("OK"),
                                  ),
                                ],
                              ),
                        );
                      },
                      child: const Text('Generar PC'),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(2.0),
                    child: Consumer<ComponentsProvider>(
                      builder:
                          (context, provider, _) => Row(
                            mainAxisSize: MainAxisSize.min,
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              const Text(
                                "Intel",
                                style: TextStyle(fontSize: 16),
                              ),
                              Switch(
                                value: provider.esAmd,
                                onChanged: (_) => provider.cambiarAmdOIntel(),
                              ),
                              const Text("AMD", style: TextStyle(fontSize: 16)),
                            ],
                          ),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(2.0),
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        textStyle: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      onPressed: () => _analizarCompatibilidadConIA(context),
                      child: const Text('Analizar con IA'),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(2.0),
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        textStyle: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      onPressed: () => context.push('/links'),
                      child: const Text('Ver Links'),
                    ),
                  ),
                ],
              ),
            ],
          );
        },
      ),
    );
  }
}
----- ./lib/presentation/screens/common/menu_lateral.dart -----
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
//import 'package:provider/provider.dart';
//import 'package:ai_pc_builder_project/core/providers/theme_provider.dart';

class MainDrawer extends StatelessWidget {
  const MainDrawer({super.key});

  @override
  Widget build(BuildContext context) {
    //final themeProvider = Provider.of<ThemeProvider>(context);
    Future<void> logOut() async {
      try {
        await FirebaseAuth.instance.signOut();
        if (!context.mounted) return;
        context.go('/');
      } catch (e) {
        print('Error al cerrar sesion $e');
      }
    }

    return Drawer(
      child: ListView(
        padding: EdgeInsets.zero,
        children: [
          const DrawerHeader(
            decoration: BoxDecoration(color: Color.fromARGB(255, 9, 11, 14)),
            child: Text(
              'Men√∫ de navegaci√≥n',
              style: TextStyle(color: Colors.white, fontSize: 24),
            ),
          ),
          ListTile(
            leading: const Icon(Icons.home),
            title: const Text('Home'),
            onTap: () => context.go('/'),
          ),
          // ListTile(
          //   leading: const Icon(Icons.link),
          //   title: const Text('Links'),
          //   onTap: () => context.go('/links'),
          // ),
          // ListTile(
          //   leading: const Icon(Icons.computer),
          //   title: const Text('Components'),
          //   onTap: () => context.go('/components'),
          // ),
          // ListTile(
          //   leading: const Icon(Icons.computer),
          //   title: const Text('Testing'),
          //   onTap: () => context.go('/testing'),
          // ),
          const Divider(),
          ListTile(
            leading: const Icon(Icons.logout_outlined),
            title: const Text('Cerrar sesi√≥n'),
            onTap: () => logOut(),
          ),
          // SwitchListTile(
          //   title: const Text("Modo oscuro"),
          //   secondary: Icon(
          //     themeProvider.isDarkMode ? Icons.dark_mode : Icons.light_mode,
          //   ),
          //   value: themeProvider.isDarkMode,
          //   onChanged: (_) => themeProvider.toggleTheme(),
          // ),
        ],
      ),
    );
  }
}
----- ./lib/presentation/screens/home/home_screen.dart -----
import 'package:ai_pc_builder_project/core/classes/component.dart';
import 'package:ai_pc_builder_project/core/providers/components_provider.dart';
import 'package:flutter/material.dart';
//import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:go_router/go_router.dart';
//import 'package:ai_pc_builder_project/presentation/screens/common/menu_lateral.dart';
import 'package:provider/provider.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:ai_pc_builder_project/core/providers/user_configuration_storage.dart';
import 'package:intl/intl.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});
  @override
  State<HomeScreen> createState() => HomeScreenState();
}

class HomeScreenState extends State<HomeScreen> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 5, 3, 26),
      appBar: AppBar(
        backgroundColor: const Color.fromARGB(255, 5, 3, 26),
        scrolledUnderElevation: 0.0,
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () async {
              try {
                await FirebaseAuth.instance.signOut();
                if (!context.mounted) return;
                context.go('/');
              } catch (e) {
                print('Error al cerrar sesion $e');
              }
            },
          ),
        ],
      ),
      body: const _MainBody(),
    );
  }
}

class _MainBody extends StatefulWidget {
  const _MainBody();
  @override
  State<_MainBody> createState() => MainBodyState();
}

class MainBodyState extends State<_MainBody> {
  List<Map<String, dynamic>> savedConfigurations = [];
  bool loadingSaved = true;

  TextEditingController inputBudget = TextEditingController();
  String selectedOption = 'Gamer';

  // Lista de opciones
  final List<String> options = ['Gamer', 'Oficina', 'Educaci√≥n', 'Edici√≥n'];

  void _loadSavedConfigurations() async {
    final uid = FirebaseAuth.instance.currentUser?.uid;
    if (uid == null) return;

    final storage = UserConfigurationStorage();
    final configs = await storage.getUserConfigurations(uid);

    setState(() {
      savedConfigurations = configs;
      loadingSaved = false;
    });
  }

  @override
  void initState() {
    super.initState();
    _loadSavedConfigurations();

    WidgetsBinding.instance.addPostFrameCallback((_) {
      final provider = Provider.of<ComponentsProvider>(context, listen: false);
      provider.importarComponentes();
    });
  }

  void solicitudDeIngresoAlArmador(
    String inputBudget,
    String selectedOption,
    BuildContext context,
  ) async {
    final int budget = int.tryParse(inputBudget) ?? 0;

    if (budget < 399999) {
      _mostrarAlerta(
        context,
        titulo: 'Presupuesto insuficiente',
        mensaje: 'El m√≠nimo para hacer una PC completa es \$400.000.',
        budgetSugerido: 400000,
      );
      return;
    }

    if (budget > 5000001) {
      _mostrarAlerta(
        context,
        titulo: 'Presupuesto excedido',
        mensaje: 'El presupuesto m√°ximo es \$5.000.000.',
        budgetSugerido: 5000000,
      );
      return;
    }

    //context.push('/components', extra: {'budget': budget});
    print("home $selectedOption");
    final result = await context.push(
      '/components',
      extra: {'budget': budget, 'selectedOption': selectedOption},
    );
    if (result == true) {
      setState(() => loadingSaved = true);
      _loadSavedConfigurations();
    }
  }

  void _mostrarAlerta(
    BuildContext context, {
    required String titulo,
    required String mensaje,
    required int budgetSugerido,
  }) {
    showDialog(
      context: context,
      builder:
          (_) => AlertDialog(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
            title: Text(
              titulo,
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            content: Padding(
              padding: const EdgeInsets.symmetric(vertical: 8.0),
              child: Text(mensaje, style: const TextStyle(fontSize: 16)),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Volver'),
              ),
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Aceptar'),
              ),
            ],
          ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final componentsProvider = Provider.of<ComponentsProvider>(context);

    return Center(
      child: SizedBox(
        width: 700,
        child: Column(
          children: [
            Image.asset(
              'assets/images/Logo.png',
              height: 300,
              fit: BoxFit.fitHeight,
            ),
            const Text('Ingresar presupuesto:'),
            const SizedBox(height: 15),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 100),
              child: TextField(
                controller: inputBudget,
                textAlign: TextAlign.center,
                keyboardType: TextInputType.number,
                inputFormatters: [FilteringTextInputFormatter.digitsOnly],
                decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  hintText: "\$650.000",
                  labelText: '',
                ),
              ),
            ),
            const SizedBox(height: 30),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Container(
                  // selector drop down de tipo de computadora
                  height: 48,
                  width: 140,
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  decoration: BoxDecoration(
                    color: const Color.fromARGB(255, 48, 49, 51),
                    borderRadius: BorderRadius.circular(30),
                    border: Border.all(
                      color: const Color.fromARGB(255, 210, 211, 212),
                    ),
                  ),
                  child: DropdownButtonHideUnderline(
                    child: DropdownButton<String>(
                      value: selectedOption,
                      icon: const Icon(
                        Icons.arrow_drop_down,
                        color: Colors.white,
                      ),
                      dropdownColor: const Color.fromARGB(255, 48, 49, 51),
                      style: const TextStyle(color: Colors.white, fontSize: 16),
                      onChanged: (String? newValue) {
                        setState(() {
                          selectedOption = newValue!;
                        });
                      },
                      items:
                          options.map<DropdownMenuItem<String>>((String value) {
                            return DropdownMenuItem<String>(
                              value: value,
                              child: Text(value),
                            );
                          }).toList(),
                    ),
                  ),
                ),

                const SizedBox(width: 16),

                SizedBox(
                  height: 48,
                  width: 240,
                  child: ElevatedButton(
                    // Boton armar pc
                    onPressed: () {
                      solicitudDeIngresoAlArmador(
                        inputBudget.text,
                        selectedOption,
                        context,
                      );
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color.fromARGB(255, 48, 49, 51),
                      foregroundColor: Colors.white,
                      elevation: 4,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(30),
                        side: const BorderSide(
                          color: Color.fromARGB(255, 210, 211, 212),
                        ),
                      ),
                      padding: const EdgeInsets.symmetric(horizontal: 32),
                      textStyle: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    child: const Text('Armar PC'),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 30),
            const Text(
              'Tus Armados Guardados:',
              style: TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 10),

            if (componentsProvider.isLoading) ...[
              const SizedBox(height: 20),
              const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(strokeWidth: 2),
                  ),
                  SizedBox(width: 10),
                  Text(
                    "Importando enlaces de tus armados guardados...",
                    style: TextStyle(color: Colors.white),
                  ),
                ],
              ),
              const SizedBox(height: 10),
            ],

            Expanded(
              child: Scrollbar(
                child: ListView.builder(
                  shrinkWrap: true,
                  itemCount: savedConfigurations.length,
                  itemBuilder: (context, index) {
                    final config = savedConfigurations[index];
                    final name = config['name'] ?? 'Sin nombre';
                    final total = config['total'] ?? 0 as double;
                    final docId = config['id'];

                    return Card(
                      margin: const EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 6,
                      ),
                      child: ListTile(
                        leading: const Icon(Icons.computer),
                        title: Text(
                          '${_getPlatformPrefix(config['componentes'])} - $name',
                        ),
                        subtitle: Text(
                          'Total: \$${NumberFormat("#,##0", "es_AR").format(total)}',
                        ),
                        trailing: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            IconButton(
                              icon: const Icon(Icons.link),
                              tooltip: 'Ver links',
                              onPressed: () {
                                final provider =
                                    Provider.of<ComponentsProvider>(
                                      context,
                                      listen: false,
                                    );
                                List<Component> componentesGuardados =
                                    List<Component>.from(
                                      (config['componentes'] as List)
                                          .where((c) => c != null)
                                          .map(
                                            (c) => Component(
                                              id: c['id'] ?? '-1',
                                              name:
                                                  c['titulo'] ??
                                                  'No seleccionado',
                                              price: c['precio'] ?? 0,
                                              image: c['imagen'] ?? '#',
                                              link: c['enlace'] ?? '#',
                                            ),
                                          ),
                                    );
                                provider.setAllSelected(componentesGuardados);
                                context.push('/links');
                              },
                            ),
                            IconButton(
                              icon: const Icon(Icons.edit),
                              tooltip: 'Editar armado',
                              onPressed: () async {
                                final confirm = await showDialog<bool>(
                                  context: context,
                                  builder:
                                      (context) => AlertDialog(
                                        title: const Text('Confirmar edici√≥n'),
                                        content: const Text(
                                          '¬øEst√°s seguro de que quer√©s modificar este armado?',
                                        ),
                                        actions: [
                                          TextButton(
                                            onPressed:
                                                () => Navigator.pop(
                                                  context,
                                                  false,
                                                ),
                                            child: const Text('Cancelar'),
                                          ),
                                          ElevatedButton(
                                            onPressed:
                                                () => Navigator.pop(
                                                  context,
                                                  true,
                                                ),
                                            child: const Text('S√≠, modificar'),
                                          ),
                                        ],
                                      ),
                                );

                                if (confirm != true) return;
                                if (!context.mounted) return;

                                List<Component> componentesGuardados =
                                    List<Component>.from(
                                      (config['componentes'] as List)
                                          .where((c) => c != null)
                                          .map(
                                            (c) => Component(
                                              id: c['id'] ?? '-1',
                                              name:
                                                  c['titulo'] ??
                                                  'No seleccionado',
                                              price: c['precio'] ?? 0,
                                              image: c['imagen'] ?? '#',
                                              link: c['enlace'] ?? '#',
                                            ),
                                          ),
                                    );

                                // Pasa seleccionados y esAmd al editar
                                final result = await context.push(
                                  '/components',
                                  extra: {
                                    'budget': total.round(),
                                    'editId': docId,
                                    'name': name,
                                    'seleccionados': componentesGuardados,
                                    'esAmd': config['esAmd'] ?? true,
                                  },
                                );
                                if (result == true) {
                                  setState(() => loadingSaved = true);
                                  _loadSavedConfigurations();
                                }
                              },
                            ),
                            IconButton(
                              icon: const Icon(Icons.delete),
                              tooltip: 'Eliminar armado',
                              onPressed: () async {
                                final confirm = await showDialog<bool>(
                                  context: context,
                                  builder:
                                      (context) => AlertDialog(
                                        title: const Text('Eliminar armado'),
                                        content: const Text(
                                          '¬øEst√°s seguro de que quer√©s eliminar este armado? Esta acci√≥n no se puede deshacer.',
                                        ),
                                        actions: [
                                          TextButton(
                                            onPressed:
                                                () => Navigator.pop(
                                                  context,
                                                  false,
                                                ),
                                            child: const Text('Cancelar'),
                                          ),
                                          ElevatedButton(
                                            onPressed:
                                                () => Navigator.pop(
                                                  context,
                                                  true,
                                                ),
                                            style: ElevatedButton.styleFrom(
                                              backgroundColor: Colors.red,
                                            ),
                                            child: const Text('Eliminar'),
                                          ),
                                        ],
                                      ),
                                );

                                if (confirm != true) return;

                                final uid =
                                    FirebaseAuth.instance.currentUser?.uid;
                                if (uid == null || docId == null) return;

                                await UserConfigurationStorage()
                                    .deleteConfiguration(
                                      uid: uid,
                                      docId: docId,
                                    );
                                setState(() {
                                  savedConfigurations.removeAt(index);
                                });
                              },
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  String _getPlatformPrefix(List componentes) {
    for (final c in componentes) {
      final titulo = (c['titulo'] ?? '').toString().toLowerCase();
      if (titulo.contains('amd') ||
          titulo.contains('am4') ||
          titulo.contains('am5')) {
        return 'AMD';
      }
      if (titulo.contains('intel') ||
          titulo.contains('1200') ||
          titulo.contains('1700')) {
        return 'Intel';
      }
    }
    return 'Gen√©rico';
  }
}
----- ./lib/presentation/screens/links/components_links_view.dart -----
import 'package:ai_pc_builder_project/core/classes/component.dart';
import 'package:ai_pc_builder_project/core/providers/components_provider.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:url_launcher/url_launcher.dart';

class ComponentsLinks extends StatefulWidget {
  const ComponentsLinks({super.key});

  @override
  State<ComponentsLinks> createState() => _ComponentsLinksState();
}

class _ComponentsLinksState extends State<ComponentsLinks> {
  late List<Component?> seleccionados = [];
  late VoidCallback listener;
  @override
  void initState() {
    super.initState();
    final provider = Provider.of<ComponentsProvider>(context, listen: false);
    seleccionados = provider.seleccionados;

    listener = () {
      if (mounted) {
        setState(() {
          seleccionados = provider.seleccionados;
        });
      }
    };

    provider.addListener(listener);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Links")),

      //body links component
      body:
          seleccionados.isEmpty
              ? Center(child: CircularProgressIndicator(strokeWidth: 2))
              : ListView(
                scrollDirection: Axis.vertical,
                children:
                    seleccionados
                        .where((sel) => sel != null)
                        .map(
                          (sel) => _Card(
                            component:
                                sel ??
                                Component(
                                  id: '-1',
                                  name: "No Seleccionado",
                                  link: "#",
                                  image: "#",
                                  price: -1,
                                ),
                          ),
                        )
                        .toList(),
              ),
      bottomNavigationBar: _RouteButtons(components: seleccionados),
    );
  }
}

class _Card extends StatelessWidget {
  final Component component;

  const _Card({required this.component}) : super();

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      color: const Color.fromRGBO(223, 194, 75, 1),
      child: InkWell(
        onTap: () {
          launchUrl(Uri.parse(component.link));
        },
        child: Stack(
          children: [
            Padding(
              padding: const EdgeInsets.fromLTRB(12, 24, 12, 24),
              child: Row(
                spacing: 20,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  if (component.image == 'none')
                    const Icon(Icons.block, size: 70),
                  if (component.image.trim().isNotEmpty)
                    ClipRRect(
                      borderRadius: BorderRadius.circular(8),
                      child: Image.network(
                        component.image,
                        width: 70,
                        height: 70,
                        cacheWidth: 140,
                        cacheHeight: 140,
                        fit: BoxFit.cover,
                        filterQuality: FilterQuality.high,
                        errorBuilder:
                            (_, __, ___) =>
                                const Icon(Icons.broken_image, size: 70),
                        loadingBuilder: (context, child, loadingProgress) {
                          if (loadingProgress == null) return child;
                          return const SizedBox(
                            width: 70,
                            height: 70,
                            child: Center(
                              child: CircularProgressIndicator(strokeWidth: 2),
                            ),
                          );
                        },
                      ),
                    )
                  else
                    const Icon(Icons.image_not_supported, size: 70),
                  Column(
                    children: [
                      SizedBox(
                        width: 270,
                        child: Text(
                          component.name,
                          overflow: TextOverflow.ellipsis,
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Colors.black,
                          ),
                        ),
                      ),
                      SizedBox(
                        width: 220,
                        child: const Text(
                          "Hace click para ir a la web del componente",
                          overflow: TextOverflow.ellipsis,
                          maxLines: 2,
                          style: TextStyle(fontSize: 16, color: Colors.black),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                ],
              ),
            ),
            Positioned(
              top: 6,
              right: 8,
              child: Icon(Icons.open_in_new, color: Colors.black),
            ),
          ],
        ),
      ),
    );
  }
}

class _RouteButtons extends StatelessWidget {
  final List<Component?> components;

  const _RouteButtons({required this.components}) : super();

  @override
  Widget build(BuildContext context) {
    String links = components.map((c) => c?.link ?? '').join('\n');
    return Container(
      padding: EdgeInsets.all(12),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          ElevatedButton(
            onPressed: () async {
              // await Clipboard.setData(ClipboardData(text: links));
              showModalBottomSheet(
                context: context,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                ),
                builder: (context) {
                  return ShareOptionsSheet(links: links);
                },
              );
            },
            child: const Text('Compartir enlaces de compra'),
          ),
        ],
      ),
    );
  }
}

class ShareOptionsSheet extends StatelessWidget {
  final String links;
  const ShareOptionsSheet({super.key, required this.links});

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 16),
      decoration: const BoxDecoration(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 80,
            height: 4,
            margin: const EdgeInsets.only(bottom: 16),
            decoration: BoxDecoration(
              color: Colors.grey[700],
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          InkWell(
            onTap: () async {
              await Clipboard.setData(ClipboardData(text: links));
            },
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.link),
                  const SizedBox(width: 8),
                  Text(
                    'Copiar enlaces de compra',
                    style: TextStyle(fontSize: 16),
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 20),
          Wrap(
            spacing: 24,
            runSpacing: 16,
            alignment: WrapAlignment.center,
            children: [
              _ShareIcon(
                icon: Icons.sms,
                label: "Mensajes",
                onTap: () {
                  final smsUri = Uri.parse('sms:?body=$links');
                  launchUrl(smsUri);
                },
              ),
              _ShareIcon(
                icon: Icons.phone,
                label: "WhatsApp",
                backgroundColor: Colors.green,
                onTap: () {
                  final whatsappUri = Uri.parse('https://wa.me/?text=$links');
                  launchUrl(whatsappUri);
                },
              ),
            ],
          ),
        ],
      ),
    );
  }
}

class _ShareIcon extends StatelessWidget {
  final IconData icon;
  final String label;
  final VoidCallback onTap;
  final Color backgroundColor;

  const _ShareIcon({
    required this.icon,
    required this.label,
    required this.onTap,
    this.backgroundColor = Colors.grey,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        GestureDetector(
          onTap: onTap,
          child: CircleAvatar(
            radius: 28,
            backgroundColor: backgroundColor,
            child: Icon(icon, size: 28),
          ),
        ),
        const SizedBox(height: 8),
        Text(label),
      ],
    );
  }
}
----- ./lib/presentation/screens/login/login.dart -----
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
//import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:go_router/go_router.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  bool _showVerifyButton = false;

  /* para usar en desarrollo
  void _loginConEnv() async {
    final email = dotenv.env['EMAIL'] ?? "";
    final password = dotenv.env['PASSWORD'] ?? "";

    try {
      final userCredential = await FirebaseAuth.instance
          .signInWithEmailAndPassword(email: email, password: password);

      final isVerified = userCredential.user?.emailVerified ?? false;

      if (isVerified) {
        if (!mounted) return;
        context.go('/home');
      } else {
        setState(() {
          _showVerifyButton = true;
        });
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Verific√° tu email antes de ingresar'),
            backgroundColor: Colors.orange,
          ),
        );
      }
    } on FirebaseAuthException catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error al iniciar sesi√≥n: ${e.message}')),
      );
    }
  }*/

  void _login() async {
    final email = emailController.text.trim();
    final password = passwordController.text.trim();

    try {
      final userCredential = await FirebaseAuth.instance
          .signInWithEmailAndPassword(email: email, password: password);

      final isVerified = userCredential.user?.emailVerified ?? false;

      if (isVerified) {
        if (!mounted) return;
        context.go('/home');
      } else {
        setState(() {
          _showVerifyButton = true;
        });
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Verific√° tu email antes de ingresar'),
            backgroundColor: Colors.orange,
          ),
        );
      }
    } on FirebaseAuthException catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error al iniciar sesi√≥n: ${e.message}')),
      );
    }
  }

  void _sendVerificationEmail() async {
    try {
      await FirebaseAuth.instance.currentUser?.sendEmailVerification();
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Correo de verificaci√≥n enviado')),
      );
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error al reenviar email: $e')));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 5, 3, 26),
      body: Center(
        child: SingleChildScrollView(
          child: Container(
            width: 320,
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: const Color(0xFF1E1E1E),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Align(
                  alignment: Alignment.centerLeft,
                  child: Text(
                    'Ingresar Mail:',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
                const SizedBox(height: 4),
                TextField(
                  controller: emailController,
                  style: const TextStyle(color: Colors.white),
                  decoration: InputDecoration(
                    hintText: 'mail',
                    hintStyle: const TextStyle(color: Colors.grey),
                    filled: true,
                    fillColor: Colors.grey[800],
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(6),
                      borderSide: BorderSide.none,
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                const Align(
                  alignment: Alignment.centerLeft,
                  child: Text(
                    'Ingresar Contrase√±a:',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
                const SizedBox(height: 4),
                TextField(
                  controller: passwordController,
                  obscureText: true,
                  style: const TextStyle(color: Colors.white),
                  decoration: InputDecoration(
                    hintText: 'contrase√±a',
                    hintStyle: const TextStyle(color: Colors.grey),
                    filled: true,
                    fillColor: Colors.grey[800],
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(6),
                      borderSide: BorderSide.none,
                    ),
                  ),
                ),
                const SizedBox(height: 24),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    OutlinedButton(
                      onPressed: () {
                        context.go('/registration');
                      },
                      style: OutlinedButton.styleFrom(
                        foregroundColor: Colors.white,
                        side: const BorderSide(color: Colors.white),
                      ),
                      child: const Text('Sign in'),
                    ),
                    ElevatedButton(
                      onPressed: _login,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color.fromARGB(255, 10, 10, 10),
                      ),
                      child: const Text('Login'),
                    ),
                  ],
                ),
                if (_showVerifyButton)
                  TextButton(
                    onPressed: _sendVerificationEmail,
                    child: const Text(
                      'Reenviar email de verificaci√≥n',
                      style: TextStyle(color: Color.fromARGB(255, 0, 0, 0)),
                    ),
                  ),
              ],
            ),
          ),
        ),
      ),
      // floatingActionButton: FloatingActionButton(
      //   onPressed: () {
      //     _loginConEnv();
      //   },
      //   child: Text("Testing"),
      // ),
    );
  }
}
----- ./lib/presentation/screens/registration/registration.dart -----
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:go_router/go_router.dart';

class RegistrationScreen extends StatefulWidget {
  const RegistrationScreen({super.key});

  @override
  State<RegistrationScreen> createState() => _RegistrationScreenState();
}

class _RegistrationScreenState extends State<RegistrationScreen> {
  final TextEditingController nameController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  final TextEditingController confirmPasswordController =
      TextEditingController();

  void _register() async {
    final name = nameController.text.trim();
    final email = emailController.text.trim();
    final password = passwordController.text.trim();
    final confirmPassword = confirmPasswordController.text.trim();

    if (password != confirmPassword) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Las contrase√±as no coinciden')),
      );
      return;
    }

    try {
      final userCredential = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(email: email, password: password);

      final uid = userCredential.user?.uid;
      if (uid != null) {
        await FirebaseFirestore.instance.collection('users').doc(uid).set({
          'nombre': name,
          'email': email,
          'createdAt': Timestamp.now(),
        });

        await userCredential.user?.sendEmailVerification();
      }

      if (!mounted) return;

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Registro exitoso. Verifica tu email.')),
      );

      await Future.delayed(const Duration(seconds: 2));
      if (mounted) context.go('/login');
    } on FirebaseAuthException catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error: ${e.message}')));
    } catch (_) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Ocurri√≥ un error inesperado.')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 5, 3, 26),
      body: Center(
        child: SingleChildScrollView(
          child: Container(
            width: 320,
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: const Color(0xFF1E1E1E),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const SizedBox(height: 24),
                _buildTextField('Ingresar Nombre:', 'nombre', nameController),
                const SizedBox(height: 12),
                _buildTextField('Ingresar Email:', 'email', emailController),
                const SizedBox(height: 12),
                _buildTextField(
                  'Ingresar Contrase√±a:',
                  'contrase√±a',
                  passwordController,
                  obscure: true,
                ),
                const SizedBox(height: 12),
                _buildTextField(
                  'Repetir Contrase√±a:',
                  'contrase√±a',
                  confirmPasswordController,
                  obscure: true,
                ),
                const SizedBox(height: 24),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    OutlinedButton(
                      onPressed: () => context.go('/login'),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: Colors.white,
                        side: const BorderSide(color: Colors.white),
                      ),
                      child: const Text('Login'),
                    ),
                    ElevatedButton(
                      onPressed: _register,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color.fromARGB(255, 10, 10, 10),
                      ),
                      child: const Text('Sign in'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextField(
    String label,
    String hint,
    TextEditingController controller, {
    bool obscure = false,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: const TextStyle(color: Colors.white)),
        const SizedBox(height: 4),
        TextField(
          controller: controller,
          obscureText: obscure,
          style: const TextStyle(color: Colors.white),
          decoration: InputDecoration(
            hintText: hint,
            hintStyle: const TextStyle(color: Colors.grey),
            filled: true,
            fillColor: Colors.grey[800],
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(6),
              borderSide: BorderSide.none,
            ),
          ),
        ),
      ],
    );
  }
}
----- ./lib/presentation/screens/search_component/search_component.dart -----
import 'package:ai_pc_builder_project/core/classes/component.dart';
import 'package:ai_pc_builder_project/core/providers/components_provider.dart';
import 'package:ai_pc_builder_project/core/services/firebase_components_service.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart';
import 'package:provider/provider.dart';

class SearchComponentScreen extends StatefulWidget {
  final String category;

  const SearchComponentScreen({super.key, required this.category});

  @override
  State<SearchComponentScreen> createState() => _SearchComponentScreenState();
}

class _SearchComponentScreenState extends State<SearchComponentScreen> {
  late List<Component> components;
  List<Component> filteredComponents = [];
  bool isLoadingComponents = true;
  String searchQuery = '';

  @override
  void initState() {
    super.initState();
    _loadComponents();
  }

  Future<void> _loadComponents() async {
    final result = await fetchComponentsByCategory(category: widget.category);

    setState(() {
      components = result;
      filteredComponents = result;
      isLoadingComponents = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      backgroundColor: const Color.fromARGB(255, 5, 3, 26),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child:
              isLoadingComponents
                  ? CircularProgressIndicator()
                  : Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      SearchBar(
                        padding: WidgetStatePropertyAll(
                          EdgeInsets.symmetric(horizontal: 16.0),
                        ),
                        leading: const Icon(Icons.search),
                        hintText: "Buscar componente",
                        onChanged: (text) {
                          print(text);
                          setState(() {
                            searchQuery = text;
                            filteredComponents =
                                components.where((component) {
                                  return component.name.toLowerCase().contains(
                                    text.toLowerCase(),
                                  );
                                }).toList();
                          });
                        },
                      ),
                      ComponentList(
                        components: filteredComponents,
                        category: widget.category,
                      ),
                    ],
                  ),
        ),
      ),
    );
  }
}

class ComponentList extends StatelessWidget {
  const ComponentList({
    super.key,
    required this.components,
    required this.category,
  });

  final List<Component> components;
  final String category;

  @override
  Widget build(BuildContext context) {
    final provider = Provider.of<ComponentsProvider>(context, listen: true);
    return Expanded(
      child: ListView.builder(
        itemCount: components.length,
        itemBuilder: (context, index) {
          final component = components[index];
          return Card(
            margin: EdgeInsets.all(12),
            child: InkWell(
              onTap: () {
                // Agregar a currentArmado

                // Encuentro el index del componente en la lista
                final index = provider.categoriasPorMarca.indexOf(category);
                print(index);

                // Cambio con el provider
                provider.setSelected(index, component);
                
                // Vuelvo al armador
                context.pop();
              },
              child: ListTile(
                leading: Image.network(
                  component.image,
                  width: 60,
                  height: 60,
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) {
                    return Icon(
                      Icons.broken_image,
                      size: 60,
                      color: Colors.grey,
                    );
                  },
                ),
                title: Text(component.name),
                subtitle: Text(
                  '\$${NumberFormat.currency(locale: 'es_AR', symbol: '\$', decimalDigits: 2).format(component.price)}',
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}
----- ./lib/presentation/screens/start/start.dart -----
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

class StartScreen extends StatelessWidget {
  const StartScreen({super.key});

  Future<void> _signInWithGoogle(BuildContext context) async {
    try {
      final googleSignIn = GoogleSignIn(
        clientId: dotenv.env['GOOGLE_CLIENT_ID_WEB'],
      );

      final GoogleSignInAccount? googleUser = await googleSignIn.signIn();
      if (googleUser == null) return;

      final googleAuth = await googleUser.authentication;
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      await FirebaseAuth.instance.signInWithCredential(credential);

      if (!context.mounted) return;
      context.go('/home');
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error al iniciar con Google: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 5, 3, 26),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.asset('assets/images/Logo.png', height: 150),
            const SizedBox(height: 50),

            // Bot√≥n Registrarse
            ElevatedButton(
              onPressed: () => context.go('/registration'),
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color.fromARGB(255, 25, 25, 25),
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
              ),
              child: const Text('Registrarse'),
            ),

            const SizedBox(height: 10),

            // Bot√≥n Iniciar sesi√≥n
            ElevatedButton(
              onPressed: () => context.go('/login'),
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color.fromARGB(255, 25, 25, 25),
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
              ),
              child: const Text('Iniciar sesi√≥n'),
            ),

            const SizedBox(height: 30),

            // Bot√≥n Acceder con Google (estilo unificado)
            ElevatedButton(
              onPressed: () => _signInWithGoogle(context),
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color.fromARGB(255, 25, 25, 25),
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Image.asset(
                    'assets/images/google_icon.png',
                    height: 24,
                    width: 24,
                  ),
                  const SizedBox(width: 12),
                  const Text('Acceder con Google'),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
----- ./lib/presentation/screens/testing/ai_test.dart -----
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:ai_pc_builder_project/presentation/screens/common/menu_lateral.dart';
import 'package:ai_pc_builder_project/core/services/openai_service.dart';

Future<String> test() async {
  final openAIService = OpenAIService();
  final res = await openAIService.sendPrompt([
    {
      "role": "user",
      "content": "Dame una lista CORTA de componentes de PC en json",
    },
  ]);
  return res;
}

class TestingSCreen extends StatefulWidget {
  const TestingSCreen({super.key});
  @override
  State<TestingSCreen> createState() => _TestingScreenState();
}

class _TestingScreenState extends State<TestingSCreen> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 5, 3, 26),
      appBar: AppBar(backgroundColor: const Color.fromARGB(255, 5, 3, 26)),
      drawer: const MainDrawer(),
      body: _MainBody(),
    );
  }
}

class _MainBody extends StatefulWidget {
  const _MainBody();

  @override
  State<_MainBody> createState() => _MainBodyState();
}

class _MainBodyState extends State<_MainBody> {
  final Future<String> _testText = test();
  TextEditingController inputBudget = TextEditingController();

  void generateConfiguration(String inputBudget, BuildContext context) {
    context.push('/components', extra: int.parse(inputBudget));
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: FutureBuilder(
        future: _testText,
        builder: (BuildContext context, AsyncSnapshot<String> snapshot) {
          Widget children;
          if (snapshot.hasData) {
            children = Text(snapshot.data!);
          } else {
            children = Text('No hay data');
          }
          return children;
        },
      ),
    );
  }
}
